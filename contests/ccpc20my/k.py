#!/usr/bin/env python3

'''
正整数x, 找到一组整数S={a1,a2,..,an}
+ 至少两个; n>=2
+ 都大于1;  ai>1 for 1<=i<=n 
+ 和为x;    \Sum ai = x
+ 两两互质..(注意是互质,不一定是质数)
要amax-amin尽可能小!, -1表示不存在!
分析:
+ 只能有一个偶数?
+ 背包?..
+ 如果是奇数: 2和(x-2), 得到x-4!?
+ 如果是偶数: 3/5/7/9.. 和(x-?)
前面想错,是要尽可能小,不是尽可能大!
+ 如果是4n,   2 则(2n-1) (2n+1), 相差2的奇数不可能有公约数
    + 肯定最小! 因为即使三个连续的数也是2!
    + min: 3-5
+ 如果是4n+1, 1 则(2n+1) 2n, 相差1的数不可能有公约数
    + min: 2-3
+ 如果是4n+2, 4 则(2n-1) (2n+3), 相差4的奇数不可能有公约数(但前提是n>1,否则不满足要求1)
    + min: 1-5(not possible); 3-7; 5-9; .. 
    + 6不行, 10..14..
    + 方案1: 连续三个数,则相差为2....则x必须是6的倍数,则..(m-1)m(m+1),m是偶数,两边为奇数! 
    + 方案2: 连续四个数里的三个数....m/+3(+1或+2) => 3m+1或3m+2..
        + 3m+1且4n+2: 12m+10(2/3/5,6/7/9,10/11/13=34)
        + 3n+2且4n+2: 12m+2 (14/26) =>(3/5/6)(7/9/10)
+ 如果是4n+3, 1 则(2n+1) 2n+2
    + 肯定最小!
    + min: 3+4
'''

def f(n):
    if n==6:
        return -1
    if   n%2==1:
        return 1
    elif n%4==0:
        return 2
    elif n%6==0:
        return 2
    elif n%12==2: 
        x=(n-5)//3
        return 4 if x%3==0 else 3
    elif n%12==10:
        x=(n-4)//3
        return 4 if x%3==0 else 3
    else:
        return 4

t = int(input())            #1e5
for i in range(t):
    n   = int(input())      #1e9
    print('Case #%d: %s'%((i+1), f(n)))

